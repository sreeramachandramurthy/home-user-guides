{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home User Guides","text":"<ul> <li> <p> Operating System</p> <p>Tutorials, Guides and Installation Steps for various operating systems - Ubuntu, CentOS, etc</p> <p> More</p> </li> <li> <p> Tools</p> <p>Tutorials and Guides of various applications and tools.</p> <p> More</p> </li> </ul>"},{"location":"os/","title":"Operating System Guides","text":"<ul> <li> <p> Ubuntu</p> <p>Tutorials, Guides and Installation Steps for Ubuntu</p> <p> More</p> </li> <li> <p> Cent OS</p> <p>Tutorials, Guides and Installation Steps for Cent OS</p> <p> More</p> </li> </ul>"},{"location":"os/centos/","title":"Cent OS","text":""},{"location":"os/centos/how-to/change-hostname/","title":"Change Hostname","text":"<p>Open Terminal and run the following commands</p> <pre><code>hostname\nhostnamectl set-hostname &lt;your-new-hostname&gt;\nsystemctl reboot\n</code></pre>"},{"location":"os/centos/how-to/disable-sleep/","title":"Disable Sleep when Laptop lid is closed","text":"<ul> <li>Open Terminal</li> <li>Edit file <code>vi /etc/systemd/logind.conf</code></li> </ul> <pre><code>HandleLidSwitch=ignore\n</code></pre> <ul> <li>Restart service <code>systemctl restart systemd-logind</code></li> </ul>"},{"location":"os/centos/how-to/ssh-banner/","title":"Customizing SSH Banner Message","text":"<ul> <li>Open Terminal</li> <li>Edit file <code>vi /etc/greetings.txt</code></li> </ul> <pre><code>#####################################\n#    WELCOME TO RAM-SERVER          #\n#####################################\n</code></pre> <ul> <li>Edit file <code>vi /etc/ssh/sshd_config</code></li> </ul> <pre><code>Banner /etc/greetings.txt\n</code></pre> <ul> <li>Restart service <code>systemctl restart sshd</code></li> </ul>"},{"location":"os/centos/how-to/static-ip/","title":"Configure Static IP Address in CentOS","text":"<ul> <li>Open Terminal</li> <li> <p>Navigate to the Network Scripts</p> <p><code>cd /etc/sysconfig/network-scripts</code></p> </li> <li> <p>Edit file <code>vi ifcfg-eth0</code> (or respective network adapter)</p> </li> </ul> <pre><code>ONBOOT=yes\nBOOTPROTO=static\nIPADDR=10.0.0.22\nNETMASK=255.255.255.0\nGATEWAY=10.0.0.1\nDNS1=10.0.0.1\n</code></pre> <ul> <li>Restart service <code>service network restart</code></li> <li>Confirm changes by running <code>ifconfig</code></li> </ul>"},{"location":"os/centos/how-to/temperature-sensors/","title":"CentOS Temperature Sensors","text":""},{"location":"os/centos/how-to/temperature-sensors/#cpu-temperature","title":"CPU Temperature","text":""},{"location":"os/centos/how-to/temperature-sensors/#install-lm-sensors","title":"Install LM Sensors","text":"<p><code>sudo yum install lm_sensors</code></p>"},{"location":"os/centos/how-to/temperature-sensors/#configure-lm-sensors","title":"Configure LM Sensors","text":"<p><code>sudo sensors-detect</code></p> <p>Say YES to all prompts</p>"},{"location":"os/centos/how-to/temperature-sensors/#get-current-cpu-temperature","title":"Get Current CPU Temperature","text":"<p><code>sensors</code></p>"},{"location":"os/centos/how-to/temperature-sensors/#monitor-cpu-temperatures","title":"Monitor CPU Temperatures","text":"<p><code>watch sensors</code></p>"},{"location":"os/centos/how-to/temperature-sensors/#hdd-temperature","title":"HDD Temperature","text":""},{"location":"os/centos/how-to/temperature-sensors/#install-hdd-temp","title":"Install HDD Temp","text":"<p><code>sudo yum install hddtemp</code></p>"},{"location":"os/centos/how-to/temperature-sensors/#get-current-hdd-temperature","title":"Get Current HDD Temperature","text":"<p><code>hddtemp</code></p>"},{"location":"os/centos/installation/install-docker-compose/","title":"Install Docker Compose","text":""},{"location":"os/centos/installation/install-docker-compose/#installation-steps","title":"Installation Steps","text":"<ul> <li> <p>Download the current stable release of Docker Compose</p> <p><code>sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose</code></p> </li> <li> <p>Apply executable permissions to the binary</p> <p><code>sudo chmod +x /usr/local/bin/docker-compose</code></p> </li> <li> <p>Check version</p> <p><code>docker-compose --version</code></p> </li> </ul>"},{"location":"os/centos/installation/install-docker-compose/#uninstallation","title":"Uninstallation","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo rm /usr/local/bin/docker-compose</code></li> </ul>"},{"location":"os/centos/installation/install-docker/","title":"Install Docker CE","text":""},{"location":"os/centos/installation/install-docker/#direct-installation","title":"Direct Installation","text":"<p>Install and update Docker from the YUM repository</p>"},{"location":"os/centos/installation/install-docker/#setup-the-yum-repository","title":"Setup the YUM Repository","text":"<ul> <li> <p>Install the <code>yum-utils</code> package (which provides the <code>yum-config-manager</code> utility) and set up the repository</p> <p><code>sudo yum install -y yum-utils</code></p> </li> <li> <p>Run <code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p> </li> </ul>"},{"location":"os/centos/installation/install-docker/#install-docker-engine","title":"Install Docker Engine","text":"<ul> <li> <p>Install the latest version of Docker Engine and containerd</p> <p><code>sudo yum install docker-ce docker-ce-cli containerd.io</code></p> </li> </ul> <p>If prompted to accept the GPG key, verify that the fingerprint matches <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>, and if so, accept it.</p> <p>Docker is installed but not started. The <code>docker</code> group is created, but no users are added to the group.</p>"},{"location":"os/centos/installation/install-docker/#start-docker","title":"Start Docker","text":"<ul> <li>Run <code>sudo systemctl start docker</code></li> </ul>"},{"location":"os/centos/installation/install-docker/#verify-docker-engine","title":"Verify Docker Engine","text":"<ul> <li>Run <code>sudo docker run hello-world</code></li> </ul> <p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p> <p>Docker Engine is installed and running. You need to use <code>sudo</code> to run Docker commands.</p>"},{"location":"os/centos/installation/install-docker/#post-installation","title":"Post Installation","text":"<p>The Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user <code>root</code> and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p> <p>If you don\u2019t want to preface the <code>docker</code> command with <code>sudo</code>, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group.</p>"},{"location":"os/centos/installation/install-docker/#create-the-docker-group","title":"Create the Docker Group","text":"<ul> <li>Run <code>sudo groupadd docker</code></li> </ul>"},{"location":"os/centos/installation/install-docker/#add-user-to-the-docker-group","title":"Add User to the Docker Group","text":"<ul> <li>Run <code>sudo usermod -aG docker $USER</code></li> </ul> <p>Log out and log back in so that your group membership is re-evaluated.</p> <ul> <li>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.</li> <li>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</li> <li> <p>On Linux, you can also run the following command to activate the changes to groups</p> <p><code>newgrp docker</code></p> </li> </ul>"},{"location":"os/centos/installation/install-docker/#verify","title":"Verify","text":"<p>Verify that you can run docker commands without <code>sudo</code>.</p> <pre><code>`docker run hello-world`\n</code></pre> <p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p> <p>If you initially ran Docker CLI commands using <code>sudo</code> before adding your user to the docker group, you may see the following error, which indicates that your <code>~/.docker/</code> directory was created with incorrect permissions due to the <code>sudo</code> commands.</p> <pre><code>WARNING: Error loading config file: /home/user/.docker/config.json -\nstat /home/user/.docker/config.json: permission denied\n</code></pre> <p>To fix this problem, either remove the <code>~/.docker/</code> directory (it is recreated automatically, but any custom settings are lost), or change its ownership and permissions using the following commands:</p> <pre><code>sudo chown \"$USER\":\"$USER\" /home/\"$USER\"/.docker -R\nsudo chmod g+rwx \"$HOME/.docker\" -R\n</code></pre>"},{"location":"os/centos/installation/install-docker/#start-on-boot","title":"Start on Boot","text":"<p>Configure Docker to start on boot</p> <pre><code>sudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n</code></pre> <p>To disable this behavior, use disable instead.</p> <pre><code>sudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n</code></pre>"},{"location":"os/centos/installation/install-docker/#uninstall-docker-engine","title":"Uninstall Docker Engine","text":"<p>To uninstall the Docker Engine, CLI, and Containerd packages, run the below command</p> <pre><code>`sudo yum remove docker-ce docker-ce-cli containerd.io`\n</code></pre> <p>Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes, run the below command</p> <pre><code>sudo rm -rf /var/lib/docker\nsudo rm -rf /var/lib/containerd\n</code></pre> <p>You must delete any edited configuration files manually.</p>"},{"location":"os/centos/installation/install-docker/#references","title":"References","text":"<ul> <li>Install Docker CE on CentOS</li> <li>Post Install on Linux</li> </ul>"},{"location":"os/centos/installation/install-java/","title":"Install Java","text":""},{"location":"os/centos/installation/install-java/#installation-steps-for-java-18","title":"Installation Steps for Java 1.8","text":"<ul> <li>Open Terminal</li> <li>Run <code>yum install java-1.8.0-openjdk.x86_64</code></li> <li>Run <code>java -version</code> to check the Java version</li> </ul>"},{"location":"os/centos/installation/install-mongodb/","title":"Install MongoDB","text":""},{"location":"os/centos/installation/install-mongodb/#installation-steps","title":"Installation Steps","text":""},{"location":"os/centos/installation/install-mongodb/#add-mongodb-repo","title":"Add MongoDB Repo","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo vi /etc/yum.repos.d/mongodb-org.repo</code></li> <li>Add the below text to the file</li> </ul> <pre><code>[mongodb-org-4.2]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.2/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc\n</code></pre> <ul> <li>Run <code>yum repolist</code></li> </ul>"},{"location":"os/centos/installation/install-mongodb/#install-mongo-db","title":"Install Mongo DB","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo yum install mongodb-org</code></li> </ul>"},{"location":"os/centos/installation/install-mongodb/#configuration","title":"Configuration","text":"<ul> <li>Open Terminal</li> <li> <p>Edit MongoDB configuration file</p> <p><code>vi /etc/mongod.conf</code></p> </li> <li> <p>Change <code>bindIp</code> to the ip address of the machine.</p> </li> </ul>"},{"location":"os/centos/installation/install-mongodb/#service","title":"Service","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo systemctl enable mongod</code> to add the MongoDB service to StartUp</li> <li>Run <code>sudo systemctl start mongod</code> to start MongoDB service</li> <li>Run <code>sudo systemctl restart mongod</code> to restart MongoDB service</li> <li>Run <code>sudo systemctl stop mongod</code> to stop MongoDB service</li> </ul>"},{"location":"os/centos/installation/install-mongodb/#logs","title":"Logs","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo tail /var/log/mongodb/mongod.log</code> to tail the MongoDB logs</li> </ul>"},{"location":"os/centos/installation/install-mongodb/#firewall","title":"Firewall","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo firewall-cmd --zone=public --add-port=27017/tcp --permanent</code> to open port <code>27017</code></li> <li>Run <code>sudo firewall-cmd --reload</code> to reload firewall service and apply the firewall rules</li> </ul>"},{"location":"os/centos/installation/install-mongodb/#process","title":"Process","text":"<ul> <li>Open Terminal</li> <li>Run <code>ps -ef | grep mongo</code> to get the process ID of MongoDB</li> <li>Run <code>netstat -an | grep 27017</code> to check the MongoDB port</li> </ul>"},{"location":"os/centos/installation/install-mongodb/#references","title":"References","text":"<ul> <li>MongoDB Docs</li> <li>MongoDB 4.2 Docs</li> </ul>"},{"location":"os/centos/installation/install-python/","title":"Install Pyhton","text":""},{"location":"os/centos/installation/install-python/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Termial</li> <li>Run <code>sudo yum install epel-release</code></li> <li>Run <code>sudo yum install python</code></li> <li>Run <code>sudo yum install python-pip</code></li> <li>Run <code>sudo yum groupinstall 'development tools'</code></li> </ul>"},{"location":"os/centos/installation/install-python/#commands","title":"Commands","text":"<ul> <li>Version - <code>pip --version</code></li> <li>List of Installed Packages - <code>pip list</code></li> </ul>"},{"location":"os/centos/installation/install-robo3t/","title":"Install Robo3T","text":""},{"location":"os/centos/installation/install-robo3t/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li> <p>Create a directory for Robo 3T software</p> <p><code>sudo mkdir /opt/robo3t</code></p> </li> <li> <p>Download Robo3T from Robo3T website or use <code>wget</code></p> <p><code>wget https://download.studio3t.com/robomongo/linux/robo3t-1.4.3-linux-x86_64-48f7dfd.tar.gz</code></p> </li> <li> <p>Extract the downloaded tarball to the Robo3T directory <code>/opt/robo3t</code></p> <p><code>sudo tar xf robo3t-1.4.3-linux-x86_64-48f7dfd.tar.gz -C /opt/robo3t --strip-component=1</code></p> </li> <li> <p>Create symbolic links for Robo3T executable, so it can be run from anywhere</p> <p><code>sudo ln -s /opt/robo3t/bin/robo3t /usr/local/bin/robo3t</code></p> </li> </ul>"},{"location":"os/centos/installation/install-robo3t/#running-robo3t","title":"Running Robo3T","text":"<ul> <li>Open Terminal</li> <li>Run <code>robo3t</code></li> </ul> <p>If you are running Robo 3T on a headless server then you have to configure x11 forwarding with PuTTY and XMing to get the GUI output on to your client machine.</p>"},{"location":"os/centos/installation/install-robo3t/#workaround-for-centos","title":"Workaround for CentOS","text":"<p>Robo 3T 1.4.x fails to run in CentOS with the below error. The linux version of Robo3T supports only Ubuntu. To run on CentOS, execute the following commands in a new Terminal.</p> <p>robo3t: error while loading shared libraries: libcurl-gnutls.so.4: cannot open shared object file: No such file or directory</p> <ul> <li> <p>Search for the packages having <code>libcurl.so.4</code> library</p> <p><code>yum whatprovides */libcurl.so.4</code></p> </li> <li> <p>Install <code>libcurl</code></p> <p><code>sudo yum install libcurl</code></p> </li> <li> <p>It gets installed into <code>/usr/lib64</code></p> </li> <li> <p>Copy the missing library to Robo 3T directory</p> <p><code>sudo cp /usr/lib64/libcurl.so.4 /opt/robo3t/lib/libcurl-gnutls.so.4</code></p> </li> <li> <p>Run Robo 3T <code>robo3t</code></p> </li> </ul>"},{"location":"os/centos/installation/install-robo3t/#add-robo3t-to-applications","title":"Add Robo3T to Applications","text":"<ul> <li> <p>Download any Robo3T icon from Google Images and copy it to the <code>bin</code> directory of Robo 3T</p> <p><code>cp robo3t.png /opt/robo3t/bin/robo3t.png</code></p> </li> <li> <p>Create a new desktop file     <code>sudo vi /usr/share/applications/Robo3T.desktop</code></p> </li> <li> <p>Add the following content to the file</p> </li> </ul> <pre><code>[Desktop Entry]\nVersion=1.4.3\nName=Robo3T\nExec=/opt/robo3t/bin/robo3t\nTerminal=false\nType=Application\nStartupNotify=true\nCategories=Development;\nIcon=/opt/robo3t/bin/robo3t.png\nX-Desktop-File-Install-Version=0.15\n</code></pre>"},{"location":"os/centos/installation/install-vscode/","title":"Install Visual Studio Code","text":""},{"location":"os/centos/installation/install-vscode/#steps","title":"Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo yum install code</code></li> </ul>"},{"location":"os/raspberry-pi-os/how-to/static-ip/","title":"Static IP","text":"<ul> <li>Enable Manual interaction for Ethernet <code>/etc/network/interfaces</code></li> </ul> <pre><code>iface eth0 inet manual\n</code></pre> <p>or</p> <pre><code>iface eth0 inet static\n</code></pre> <p>sudo apt install dhcpcd</p> <p>sudo vi /etc/dhcpcd.conf  interface eth0  static ip_address=10.0.0.40/24 static routers=10.0.0.1 static domain_name_servers=10.0.0.1</p> <ul> <li>Restart the Raspberry Pi <code>sudo reboot</code></li> </ul>"},{"location":"os/ubuntu/softwares/","title":"Softwares installed in Ubuntu","text":""},{"location":"os/ubuntu/softwares/#softwares","title":"Softwares","text":"<ul> <li>BitWarden</li> <li>FileZilla</li> <li>GIMP</li> <li>Git</li> <li>HPLIP</li> <li>Libre Office</li> <li>MKV ToolNix</li> <li>Node</li> <li>Open JDK 1.8</li> <li>Postman</li> <li>PuddleTAG</li> <li>Visual Studio Code</li> <li>VLC</li> <li>Sublime Text</li> <li>Telegram</li> <li>Termius</li> <li>Transmission</li> <li>VLC</li> </ul>"},{"location":"os/ubuntu/how-to/increase-lvm-partition-size/increase-lvm-partition-size/","title":"Increase LVM Partition Size","text":""},{"location":"os/ubuntu/how-to/increase-lvm-partition-size/increase-lvm-partition-size/#overview","title":"Overview","text":"<p>By default, Ubuntu installer uses only portion of disk space for the root file system! This guide is to explain how to extend and utilize the full disk space after installation.</p>"},{"location":"os/ubuntu/how-to/increase-lvm-partition-size/increase-lvm-partition-size/#linux-lvm","title":"Linux LVM","text":"<p>LVM is an abstraction framework which exists between the physical (or virtual) disks and the Linux file system (which is likely <code>ext4</code>). It is used to group separate block devices (partitions) together into Volume Groups (VGs), and then chop those VGs up into logical block devices, or Logical Volumes (LVs). LVs are the abstracted block devices upon which your usable file system resides.</p> <p></p> <p></p>"},{"location":"os/ubuntu/how-to/increase-lvm-partition-size/increase-lvm-partition-size/#steps","title":"Steps","text":"<ul> <li>Open Terminal</li> <li>View the Volume Groups</li> </ul> <pre><code>sudo vgdisplay\n</code></pre> <ul> <li>View the Logical Volume</li> </ul> <pre><code>sudo lvdisplay\n</code></pre> <p>Extend the Logical Volume</p> <pre><code>sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv\n</code></pre> <ul> <li>Verify the Changes</li> </ul> <pre><code>sudo lvdisplay\n</code></pre> <ul> <li>View the File System</li> </ul> <pre><code>df -h\n</code></pre> <ul> <li>Extend the File System</li> </ul> <pre><code>sudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv\n</code></pre> <ul> <li>Verify the Changes</li> </ul> <pre><code>df -h\n</code></pre>"},{"location":"os/ubuntu/how-to/increase-lvm-partition-size/increase-lvm-partition-size/#references","title":"References","text":"<ol> <li>https://packetpushers.net/blog/ubuntu-extend-your-default-lvm-space/</li> </ol>"},{"location":"os/ubuntu/how-to/install-firefox-without-snap/install-firefox-without-snap/","title":"Firefox","text":""},{"location":"os/ubuntu/how-to/install-firefox-without-snap/install-firefox-without-snap/#install-firefox-without-snap","title":"Install Firefox without Snap","text":"<ul> <li>Open Terminal</li> <li>Install Mozilla Keyrings</li> </ul> <pre><code>wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc &gt; /dev/null\n</code></pre> <ul> <li>Add APT Sources</li> </ul> <pre><code>echo \"deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main\" | sudo tee -a /etc/apt/sources.list.d/mozilla.list &gt; /dev/null\n</code></pre> <ul> <li>Set priority to prevent using Snap</li> </ul> <pre><code>echo '\nPackage: *\nPin: origin packages.mozilla.org\nPin-Priority: 1000\n\nPackage: firefox*\nPin: release o=Ubuntu\nPin-Priority: -1' | sudo tee /etc/apt/preferences.d/mozilla\n</code></pre> <ul> <li>Install Firefox</li> </ul> <pre><code>sudo apt install firefox\n</code></pre>"},{"location":"os/ubuntu/how-to/mount-drive-on-boot/mount-drive-on-boot/","title":"How to Mount Drive on Boot","text":""},{"location":"os/ubuntu/how-to/mount-drive-on-boot/mount-drive-on-boot/#overview","title":"Overview","text":"<p>When we connect an external drive, by default, Linux OS (or Ubuntu Server) doesn't automount the external drive at startup. We can mount the drive using the <code>mount</code> command manually but we can also enable automount feature on startup. This feature avoids us to mount the drive again after restarting or logging into Linux OS.</p>"},{"location":"os/ubuntu/how-to/mount-drive-on-boot/mount-drive-on-boot/#steps","title":"Steps","text":"<ul> <li>Create a directory for mounting the attached drive   <p>Normally mount directories are created in <code>/media</code> </p> </li> </ul> <pre><code>sudo mkdir /media/ram/caddy\n</code></pre> <ul> <li>Get the attached drive's UUID and and File System Type</li> </ul> <pre><code>lsblk -o NAME,FSTYPE,UUID,MOUNTPOINTS\n</code></pre> <ul> <li>Edit <code>fstab</code> to add attached drive's details</li> </ul> <pre><code>sudo vi /etc/fstab\n</code></pre> <ul> <li>Add entry for the attached drive   <p>Values are seperated by <code>TAB</code></p> </li> </ul> <pre><code>UUID=xxxx-xxxx-xxxx-xxxx-xxxx    /media/ram/caddy    ext4    defaults    0    0\n</code></pre> <ul> <li>Test <code>fstab</code> <p>Test <code>fstab</code> before rebooting as an invalid <code>fstab</code> can render a disk unbootable</p> </li> </ul> <pre><code>sudo findmnt --verify\n</code></pre> <ul> <li>Restart Ubuntu</li> </ul> <pre><code>sudo reboot\n</code></pre>"},{"location":"os/ubuntu/how-to/mount-drive-on-boot/mount-drive-on-boot/#references","title":"References","text":"<ol> <li>https://developerinsider.co/auto-mount-drive-in-ubuntu-server-22-04-at-startup/</li> </ol>"},{"location":"os/ubuntu/how-to/remove-snap/remove-snap/","title":"How to Remove Snap in Ubuntu","text":""},{"location":"os/ubuntu/how-to/remove-snap/remove-snap/#disclaimer","title":"Disclaimer","text":"<p>Removing <code>Snap</code> is perfectly safe as of 22.04 but may lead to unwanted behaviour.</p>"},{"location":"os/ubuntu/how-to/remove-snap/remove-snap/#steps","title":"Steps","text":"<ul> <li>First, list down the installed snaps in the system</li> </ul> <pre><code>snap list\n</code></pre> <ul> <li>For each Snap listed, remove and purge it</li> </ul> <pre><code>snap remove --purge &lt;&lt;snap&gt;&gt;\n</code></pre> <ul> <li>Finally remove the <code>snapd</code></li> </ul> <pre><code>apt remove --purge snapd\n</code></pre> <ul> <li>Updating Ubuntu may enable snap again. To disable it run the following command.</li> </ul> <pre><code>apt-mark hold snapd\n</code></pre> <ul> <li>Delete the snap directory in all home directories</li> </ul> <pre><code>rm -rf /home/*/snap\n</code></pre> <ul> <li>Some daemons have files in their home directories too. Use find and delete.</li> </ul> <pre><code>find / -type d -name snap\n</code></pre>"},{"location":"os/ubuntu/how-to/remove-snap/remove-snap/#references","title":"References","text":"<ol> <li>https://www.reddit.com/r/Ubuntu/comments/1chilj4/completely_remove_snap_from_ubuntu_2404</li> </ol>"},{"location":"os/ubuntu/installation/install-android-sdk/","title":"Android SDK","text":""},{"location":"os/ubuntu/installation/install-android-sdk/#instation-steps","title":"Instation Steps","text":"<ul> <li>Open Terminal</li> <li>Install ADB</li> </ul> <pre><code>sudo apt install android-tools-adb\n</code></pre> <ul> <li>Install Android SDK</li> </ul> <pre><code>sudo apt install android-sdk android-sdk-helper\n</code></pre> <ul> <li>Install Android Command Line Tools</li> </ul> <pre><code>cd ~/Documents\nmkdir sdk\nwget https://dl.google.com/android/repository/tools_r25.2.3-linux.zip\nunzip tools_r25.2.3-linux.zip -d /sdk\ncd sdk/tools\n./android update sdk\n</code></pre> <ul> <li> <p>Install necessary SDK's</p> </li> <li> <p>Close and re-open Terminal</p> </li> <li>Add new directories to the PATH</li> </ul> <pre><code>export ANDROID_HOME=$HOME/Documents/sdk\nexport PATH=${PATH}:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/build-tools/29.0.3/\n</code></pre>"},{"location":"os/ubuntu/installation/install-arduino-ide/","title":"Install Arduino IDE","text":""},{"location":"os/ubuntu/installation/install-arduino-ide/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Install dependency packages</li> </ul> <pre><code>sudo add-apt-repository universe\n</code></pre> <pre><code>sudo apt install libfuse2\n</code></pre> <ul> <li> <p>Download Arduino IDE Package from https://www.arduino.cc/en/software</p> </li> <li> <p>Go to the downloaded path of the package</p> </li> </ul> <pre><code>cd ~/&lt;downloaded path&gt;\n</code></pre> <ul> <li>Extract the TAR</li> </ul> <pre><code>tar xvf &lt;filename&gt;\n</code></pre> <ul> <li>Install from the package</li> </ul> <pre><code>sudo sh install.sh\n</code></pre> <ul> <li>Add permissions to open port</li> </ul> <pre><code>sudo usermod -a -G dialout $USER\n</code></pre> <pre><code>groups\n</code></pre> <pre><code>ls -l /dev/ttyUSB*\n</code></pre>"},{"location":"os/ubuntu/installation/install-discord/","title":"Install Discord","text":""},{"location":"os/ubuntu/installation/install-discord/#installation-steps","title":"Installation Steps","text":"<ul> <li>Download the package installer from https://discord.com/download</li> <li>Open Terminal</li> <li>Navigate to the downloaded path using the command <code>cd</code> <code>cd &lt;download-path&gt;</code></li> <li>Run <code>sudo apt install ./discord-*.deb</code> (replace * with exact version)</li> </ul>"},{"location":"os/ubuntu/installation/install-docker/","title":"Install Docker CE","text":""},{"location":"os/ubuntu/installation/install-docker/#install-using-the-apt-repository","title":"Install using the APT Repository","text":"<p>Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p>"},{"location":"os/ubuntu/installation/install-docker/#set-up-the-repository","title":"Set up the Repository","text":"<ul> <li>Open Terminal</li> <li>Update Ubuntu</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install dependant packages</li> </ul> <pre><code>sudo apt install ca-certificates curl gnupg\n</code></pre> <ul> <li>Add Docker\u2019s official GPG key</li> </ul> <pre><code>sudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n</code></pre> <ul> <li>Add the Repository</li> </ul> <pre><code>echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update\n</code></pre>"},{"location":"os/ubuntu/installation/install-docker/#install-docker-engine","title":"Install Docker Engine","text":"<ul> <li>Open Terminal</li> <li>To install the latest version, run</li> </ul> <pre><code>sudo apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"os/ubuntu/installation/install-docker/#verify-installation","title":"Verify Installation","text":"<ul> <li>To verify that the Docker Engine installation is successful, run the <code>hello-world</code> image.</li> </ul> <pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"os/ubuntu/installation/install-docker/#manage-docker-as-a-non-root-user","title":"Manage Docker as a non-root User","text":"<p>The Docker daemon binds to a Unix socket, not a TCP port. By default it's the <code>root</code> user that owns the Unix socket, and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p> <p>If you don't want to preface the <code>docker</code> command with sudo, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group. On some Linux distributions, the system automatically creates this group when installing Docker Engine using a package manager. In that case, there is no need for you to manually create the group.</p> <ul> <li>Create the Docker group</li> </ul> <pre><code>sudo groupadd docker\n</code></pre> <ul> <li>Add user to the Docker group</li> </ul> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <ul> <li>Activate the changes to the groups</li> </ul> <pre><code>newgrp docker\n</code></pre> <ul> <li>Verify that you can run <code>docker</code> commands without <code>sudo</code>.</li> </ul> <pre><code>docker run hello-world\n</code></pre>"},{"location":"os/ubuntu/installation/install-docker/#start-on-boot","title":"Start on Boot","text":"<p>Configure Docker to start on boot</p> <ul> <li>Open Terminal</li> <li>Run the below commands</li> </ul> <pre><code>sudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n</code></pre> <p>To disable this behavior, use disable instead.</p> <pre><code>sudo systemctl disable docker.service\nsudo systemctl disable containerd.service\n</code></pre>"},{"location":"os/ubuntu/installation/install-docker/#references","title":"References","text":"<ul> <li>https://docs.docker.com/engine/install/ubuntu/</li> <li>https://docs.docker.com/engine/install/linux-postinstall/</li> </ul>"},{"location":"os/ubuntu/installation/install-freecad/","title":"Install FreeCAD","text":""},{"location":"os/ubuntu/installation/install-freecad/#add-repository","title":"Add Repository","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo add-apt-repository ppa:freecad-maintainers/freecad-stable</code></li> <li>Run <code>sudo apt update</code></li> </ul>"},{"location":"os/ubuntu/installation/install-freecad/#installation","title":"Installation","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install freecad</code></li> </ul>"},{"location":"os/ubuntu/installation/install-freecad/#installation-of-offline-docs","title":"Installation of Offline Docs","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install freecad-doc</code></li> </ul>"},{"location":"os/ubuntu/installation/install-freecad/#run-freecad","title":"Run FreeCAD","text":"<ul> <li>Open Terminal</li> <li>Run <code>./freecad</code></li> </ul>"},{"location":"os/ubuntu/installation/install-gimp/","title":"Install GIMP","text":""},{"location":"os/ubuntu/installation/install-gimp/#installation-steps","title":"Installation Steps","text":"<p>Open Terminal and execute the below commands to install GIMP through APT</p> <ul> <li>Install VLC</li> </ul> <pre><code>sudo apt install gimp\n</code></pre>"},{"location":"os/ubuntu/installation/install-git/","title":"Install GIT","text":""},{"location":"os/ubuntu/installation/install-git/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install git</code></li> </ul>"},{"location":"os/ubuntu/installation/install-git/#configure","title":"Configure","text":"<ul> <li>Open Terminal</li> <li>Run the below commands</li> </ul> <pre><code>git config --global user.email \"sreeramachandramurthy.chitturi@gmail.com\"\ngit config --global user.name \"Sree Ramachandra Murthy Chitturi\"\n</code></pre>"},{"location":"os/ubuntu/installation/install-glances/","title":"Glances","text":""},{"location":"os/ubuntu/installation/install-glances/#installation-steps","title":"Installation Steps","text":"<p>Open Terminal and execute the below commands to install Glances through PipX</p> <ul> <li>Install dependant packages</li> </ul> <pre><code>sudo apt install python3 python3-pip pipx\npipx ensurepath\n</code></pre> <ul> <li>Close and re-open Terminal</li> <li>Install Glances with PipX</li> </ul> <pre><code>pipx install 'glances[all]'\n</code></pre>"},{"location":"os/ubuntu/installation/install-glances/#enable-auto-start","title":"Enable Auto Start","text":"<p>Open Terminal and execute the below commands to enable Glances to start after system boot</p> <ul> <li>Create a service file in <code>systemd</code></li> </ul> <pre><code>sudo vi /etc/systemd/system/glances.service\n</code></pre> <pre><code>[Unit]\nDescription=Glances\nAfter=network.target\n\n[Service]\nExecStart=/home/${USER}/.local/bin/glances -t 300 -w\nRestart=on-abort\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <ul> <li>Reload SystemCtl Daemon</li> </ul> <pre><code>sudo systemctl daemon-reload\n</code></pre> <ul> <li>Start Glances</li> </ul> <pre><code>sudo systemctl start glances\n</code></pre> <ul> <li>Enable the Service</li> </ul> <pre><code>sudo systemctl enable glances\n</code></pre>"},{"location":"os/ubuntu/installation/install-glances/#whitelist-ui-port","title":"Whitelist UI Port","text":"<p>Open Terminal and execute the below commands to open ports for accessing the Web UI in external systems</p> <pre><code>sudo ufw allow 61208/tcp\n</code></pre>"},{"location":"os/ubuntu/installation/install-glances/#web-ui","title":"Web UI","text":"<ul> <li>Open Glances Web UI at http://localhost:61208/</li> </ul>"},{"location":"os/ubuntu/installation/install-glances/#commands","title":"Commands","text":""},{"location":"os/ubuntu/installation/install-glances/#service-commands","title":"Service Commands","text":"Type Command Comments Version <code>glances -V</code> Web Server <code>glances -w</code> Refresh Rate <code>glances -t 5</code> 5 seconds Enable Plugin <code>glances --enable-plugin smart</code> pySMART plugin"},{"location":"os/ubuntu/installation/install-glances/#systemctl-commands","title":"SystemCtl Commands","text":"Type Command Comments Start the Service <code>sudo systemctl start glances</code> Stop the Service <code>sudo systemctl stop glances</code> Restart the Service <code>sudo systemctl restart glances</code> Enable the Service <code>sudo systemctl enable glances</code> Status of the Service <code>sudo systemctl status glances</code>"},{"location":"os/ubuntu/installation/install-glances/#references","title":"References","text":"<ul> <li>Glances GitHub - https://github.com/nicolargo/glances</li> <li>Manual Web UI Installation - https://github.com/nicolargo/glances/issues/2021</li> <li>Autostart Glances - https://github.com/nicolargo/glances/wiki/Start-Glances-through-Systemd</li> </ul>"},{"location":"os/ubuntu/installation/install-gnome-shell-extensions/","title":"Install GNOME Shell Extensions","text":""},{"location":"os/ubuntu/installation/install-gnome-shell-extensions/#installation","title":"Installation","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install gnome-shell-extensions</code></li> </ul>"},{"location":"os/ubuntu/installation/install-influxdb/","title":"Install InfluxDB","text":""},{"location":"os/ubuntu/installation/install-influxdb/#install-influxdb-as-a-service","title":"Install InfluxDB as a Service","text":"<ul> <li>Open Terminal</li> <li>Update the Ubuntu System</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Add the GPG fingerprint</li> </ul> <pre><code>wget -q https://repos.influxdata.com/influxdata-archive_compat.key`\necho '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c &amp;&amp; cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg &gt; /dev/null\n</code></pre> <ul> <li>Add the InfluxDB to the repository list</li> </ul> <pre><code>echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list\n</code></pre> <ul> <li>Update the Ubuntu System</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install InfluxDB</li> </ul> <pre><code>sudo apt install influxdb\n</code></pre> <ul> <li>Check Version of InfluxDB</li> </ul> <pre><code>influx -version\n</code></pre> <ul> <li>Start the InfluxDB as a Service</li> </ul> <pre><code>sudo systemctl start influxdb\n</code></pre> <ul> <li>Verify the InfluxDB installation</li> </ul> <pre><code>sudo service influxdb status\n</code></pre>"},{"location":"os/ubuntu/installation/install-influxdb/#config-influxdb","title":"Config InfluxDB","text":"<ul> <li>Start the Service</li> </ul> <pre><code>sudo service influxdb start\n</code></pre> <ul> <li>Restart the Service</li> </ul> <pre><code>sudo service influxdb restart\n</code></pre> <ul> <li>Stop the Service</li> </ul> <pre><code>sudo service influxdb stop\n</code></pre> <ul> <li>Enable the Service</li> </ul> <pre><code>sudo systemctl enable influxdb\n</code></pre>"},{"location":"os/ubuntu/installation/install-influxdb/#config-firewall","title":"Config Firewall","text":"<ul> <li>Whitelist InfluxDB in Firewall</li> </ul> <pre><code>sudo ufw allow 8086/tcp\n</code></pre>"},{"location":"os/ubuntu/installation/install-influxdb/#references","title":"References","text":"<ol> <li>https://docs.influxdata.com/influxdb/v1/introduction/install/</li> </ol>"},{"location":"os/ubuntu/installation/install-influxdb2/","title":"Install InfluxDB2","text":""},{"location":"os/ubuntu/installation/install-influxdb2/#install-influxdb2-as-a-service","title":"Install InfluxDB2 as a Service","text":"<ul> <li>Open Terminal</li> <li>Update the Ubuntu System <code>sudo apt update</code></li> <li>Add the GPG Fingerprint <code>wget -q https://repos.influxdata.com/influxdata-archive_compat.key</code> <code>echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c &amp;&amp; cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg &gt; /dev/null</code> </li> <li>Add the InfluxDB2 to the Repo List <code>echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list</code></li> <li>Update the Ubuntu System <code>sudo apt update</code></li> <li>Install InfluxDB <code>sudo apt install influxdb2</code></li> <li>Check Version of InfluxDB <code>influx version</code></li> <li>Start the InfluxDB as a Service <code>sudo systemctl start influxdb</code></li> <li>Verify the InfluxDB Installation <code>sudo service influxdb status</code></li> </ul>"},{"location":"os/ubuntu/installation/install-influxdb2/#config-the-influxdb2","title":"Config the InfluxDB2","text":"<ul> <li>Start the Service <code>sudo service influxdb start</code></li> <li>Restart the Service <code>sudo service influxdb restart</code></li> <li>Stop the Service <code>sudo service influxdb stop</code></li> <li>Enable the Service <code>sudo systemctl enable influxdb</code></li> </ul>"},{"location":"os/ubuntu/installation/install-influxdb2/#config-firewall","title":"Config Firewall","text":"<ul> <li>Whitelist InfluxDB in Firewall <code>sudo ufw allow 8086/tcp</code></li> </ul>"},{"location":"os/ubuntu/installation/install-influxdb2/#gui","title":"GUI","text":"<p>http://localhost:8086</p>"},{"location":"os/ubuntu/installation/install-java/","title":"Install Java","text":""},{"location":"os/ubuntu/installation/install-java/#installation-steps","title":"Installation Steps","text":""},{"location":"os/ubuntu/installation/install-java/#install-java-common","title":"Install Java Common","text":"<ul> <li>Open Terminal</li> <li>Install Java Common</li> </ul> <pre><code>sudo apt install java-common\n</code></pre>"},{"location":"os/ubuntu/installation/install-java/#install-openjdk-8","title":"Install OpenJDK 8","text":"<ul> <li>Open Terminal</li> <li>Install Open JDK 8</li> </ul> <pre><code>sudo apt install openjdk-8-jdk\n</code></pre>"},{"location":"os/ubuntu/installation/install-java/#install-openjdk-11","title":"Install OpenJDK 11","text":"<ul> <li>Open Terminal</li> <li>Install Open JDK 11</li> </ul> <pre><code>sudo apt install openjdk-11-jdk\n</code></pre>"},{"location":"os/ubuntu/installation/install-java/#install-openjdk-18","title":"Install OpenJDK 18","text":"<ul> <li>Open Terminal</li> <li>Install Open JDK 18</li> </ul> <pre><code>sudo apt install openjdk-18-jdk\n</code></pre>"},{"location":"os/ubuntu/installation/install-java/#java-alternatives","title":"Java Alternatives","text":"<ul> <li>Open Terminal</li> <li>To list diiferent Java versions in the system, run the below command</li> </ul> <pre><code>update-java-alternatives --list\n</code></pre>"},{"location":"os/ubuntu/installation/install-kodi/","title":"Install Kodi","text":""},{"location":"os/ubuntu/installation/install-kodi/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Install dependencies for Kodi</li> </ul> <pre><code>sudo apt install software-properties-common\n</code></pre> <ul> <li>Add Kodi repository</li> </ul> <pre><code>sudo add-apt-repository ppa:team-xbmc/ppa\n</code></pre> <ul> <li>Install Kodi</li> </ul> <pre><code>sudo apt install kodi\n</code></pre>"},{"location":"os/ubuntu/installation/install-kodi/#references","title":"References","text":"<ol> <li>Kodi Wiki</li> </ol>"},{"location":"os/ubuntu/installation/install-mkdocs/","title":"Install MkDocs","text":""},{"location":"os/ubuntu/installation/install-mkdocs/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install python3</code></li> <li>Run <code>sudo apt install mkdocs</code></li> </ul>"},{"location":"os/ubuntu/installation/install-mkdocs/#installation-steps-python","title":"Installation Steps (Python)","text":"<ul> <li>Open Terminal</li> <li>Run <code>pip install mkdocs</code></li> <li>Run <code>pip install mkdocs-material</code></li> </ul>"},{"location":"os/ubuntu/installation/install-mkdocs/#commands","title":"Commands","text":"Action Command Create Project <code>mkdocs new &lt;project-name&gt;</code> Build Project <code>mkdocs build</code> Run Project <code>mkdocs serve</code>"},{"location":"os/ubuntu/installation/install-mosquitto/","title":"Install Mosquitto","text":""},{"location":"os/ubuntu/installation/install-mosquitto/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Add Mosquitto repository <code>sudo add-apt-repository ppa:mosquitto-dev/mosquitto-ppa</code></li> <li>Install Mosquitto <code>sudo apt install mosquitto</code></li> <li>Check Mosquitto version <code>mosquitto -version</code></li> <li>Remove anonymous access (create an account)  </li> </ul> <pre><code>sudo mosquitto_passwd -c /etc/mosquitto/passwd &lt;username&gt;\nPassword:\nReenter password:\n</code></pre> <ul> <li>Update the default configuration at <code>/etc/mosquitto/conf.d/default.conf</code> </li> </ul> <pre><code>listener 1883\npassword_file /etc/mosquitto/passwd\n</code></pre> <ul> <li>Update the file permissions for the password file <code>sudo chmod 666 etc/mosquitto/passwd</code></li> <li>Restart the Mosquitto service <code>sudo systemctl restart mosquitto</code></li> </ul>"},{"location":"os/ubuntu/installation/install-mosquitto/#service","title":"Service","text":"<ul> <li>Start the Service <code>sudo service mosquitto start</code></li> <li>Restart the Service <code>sudo service mosquitto restart</code></li> <li>Stop the Service <code>sudo service mosquitto stop</code></li> <li>Enable the Service <code>sudo systemctl enable mosquitto</code></li> </ul>"},{"location":"os/ubuntu/installation/install-mysql-workbench/","title":"Install MySQL Workbench","text":""},{"location":"os/ubuntu/installation/install-mysql-workbench/#install-community-edition","title":"Install Community Edition","text":""},{"location":"os/ubuntu/installation/install-mysql-workbench/#installation-steps","title":"Installation Steps","text":"<ul> <li>Download the Debian Package from https://dev.mysql.com/downloads/workbench/</li> <li>Open Terminal</li> <li>Navigate to the location where the Debian Package was saved</li> <li>Run <code>sudo apt install ./&lt;package-name&gt;.deb</code></li> </ul>"},{"location":"os/ubuntu/installation/install-mysql-workbench/#notes","title":"Notes","text":"<p>The <code>dbgsym</code> package contains debug symbols. You can ignore the <code>dbgsym</code> package.</p>"},{"location":"os/ubuntu/installation/install-mysql/","title":"Install MySQL","text":""},{"location":"os/ubuntu/installation/install-mysql/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install mysql-server</code></li> <li>Run <code>mysql --version</code></li> <li>Run <code>sudo mysql_secure_installation</code></li> <li> <p>Run <code>sudo systemctl status mysql</code></p> </li> <li> <p><code>sudo mysql -u root</code></p> </li> <li><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'yourpasswd';</code></li> </ul> <p>changing bind-address 127.0.0.1 to bind-address 0.0.0.0 in /etc/mysql/mysql.conf.d so that MySQL listens on all ports.</p>"},{"location":"os/ubuntu/installation/install-net-tools/","title":"Install Net Tools","text":""},{"location":"os/ubuntu/installation/install-net-tools/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install net-tools</code></li> </ul>"},{"location":"os/ubuntu/installation/install-node-npm/","title":"Install Node &amp; NPM","text":""},{"location":"os/ubuntu/installation/install-node-npm/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Install NodeJS</li> </ul> <pre><code>sudo apt install nodejs\n</code></pre> <ul> <li>Install NPM</li> </ul> <pre><code>sudo apt install npm\n</code></pre>"},{"location":"os/ubuntu/installation/install-nvm/","title":"Node Version Manager","text":""},{"location":"os/ubuntu/installation/install-nvm/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Execute NVM install script</li> </ul> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash\n</code></pre>"},{"location":"os/ubuntu/installation/install-nvm/#commands","title":"Commands","text":"Command Description nvm install  Install sepecific node version nvm ls-remote --lts List available Node versions (LTS) nvm ls List installed Node versions nvm use  User sepicific Node version"},{"location":"os/ubuntu/installation/install-openssh/","title":"Install Net Tools","text":""},{"location":"os/ubuntu/installation/install-openssh/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install openssh-server</code></li> </ul>"},{"location":"os/ubuntu/installation/install-portainer/","title":"Install Portainer CE","text":""},{"location":"os/ubuntu/installation/install-portainer/#prerequisites","title":"Prerequisites","text":"<ul> <li>The latest version of Docker installed and working.</li> <li><code>sudo</code> access on the machine that will host your Portainer Server instance.</li> </ul>"},{"location":"os/ubuntu/installation/install-portainer/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Create volume for Portainer Server</li> </ul> <pre><code>docker volume create portainer-data\n</code></pre> <ul> <li>Download and install the Portainer Server container</li> </ul> <pre><code>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer-data:/data portainer/portainer-ce:2.21.2\n</code></pre> <ul> <li>Verify installation</li> </ul> <pre><code>docker ps\n</code></pre>"},{"location":"os/ubuntu/installation/install-portainer/#references","title":"References","text":"<ol> <li>https://docs.portainer.io/start/install-ce/server/docker/linux</li> </ol>"},{"location":"os/ubuntu/installation/install-puddletag/","title":"Install PuddleTAG","text":""},{"location":"os/ubuntu/installation/install-puddletag/#installation-steps","title":"Installation Steps","text":"<p>Open Terminal and execute the below commands to install PuddleTAG through APT</p> <ul> <li>Install VLC</li> </ul> <pre><code>sudo apt install puddletag\n</code></pre>"},{"location":"os/ubuntu/installation/install-python/","title":"Install Python","text":""},{"location":"os/ubuntu/installation/install-python/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Run <code>sudo apt install python3</code></li> <li>Run <code>sudo apt install python3-pip</code></li> </ul>"},{"location":"os/ubuntu/installation/install-snmp/","title":"Install SNMP","text":"<p>sudo apt-get update sudo apt-get install snmpd sudo nano /etc/snmp/snmpd.conf     agentAddress udp:161,udp6:[::1]:161     rocommunity public sudo service snmpd restart sudo service snmpd status</p> <p>Install the tools</p> <p>sudo apt-get install snmp-mibs-downloader</p> <p>SNMP usage</p> <p>snmpwalk -c public -v1 localhost | less</p>"},{"location":"os/ubuntu/installation/install-tasmotizer/","title":"Install tasmotizer","text":"<p>~ \u2593\u2592\u2591 pip3 install --upgrade wheel                                                                        \u2591\u2592\u2593 \u2714  Defaulting to user installation because normal site-packages is not writeable Requirement already satisfied: wheel in /usr/lib/python3/dist-packages (0.37.1) Collecting wheel   Downloading wheel-0.42.0-py3-none-any.whl (65 kB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 65.4/65.4 kB 353.3 kB/s eta 0:00:00 Installing collected packages: wheel   WARNING: The script wheel is installed in '/home/ram/.local/bin' which is not on PATH.   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. Successfully installed wheel-0.42.0</p> <p>[notice] A new release of pip is available: 23.0.1 -&gt; 23.3.2 [notice] To update, run: python3 -m pip install --upgrade pip  ~ \u2593\u2592\u2591 python3 -m pip install --upgrade pip                                                           \u2591\u2592\u2593 \u2714  22s  Defaulting to user installation because normal site-packages is not writeable Requirement already satisfied: pip in /usr/local/lib/python3.10/dist-packages (23.0.1) Collecting pip   Downloading pip-23.3.2-py3-none-any.whl (2.1 MB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 2.1/2.1 MB 4.8 MB/s eta 0:00:00 Installing collected packages: pip   WARNING: The scripts pip, pip3 and pip3.10 are installed in '/home/ram/.local/bin' which is not on PATH.   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. Successfully installed pip-23.3.2</p> <p>[notice] A new release of pip is available: 23.0.1 -&gt; 23.3.2 [notice] To update, run: python3 -m pip install --upgrade pip  ~ \u2593\u2592\u2591 pip --version                                                                                  \u2591\u2592\u2593 \u2714  10s  pip 23.3.2 from /home/ram/.local/lib/python3.10/site-packages/pip (python 3.10)  ~ \u2593\u2592\u2591 pip3 install tasmotizer                                                                             \u2591\u2592\u2593 \u2714  Defaulting to user installation because normal site-packages is not writeable Collecting tasmotizer   Downloading tasmotizer-1.2.1-py3-none-any.whl (196 kB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 196.8/196.8 kB 189.8 kB/s eta 0:00:00 Collecting pyserial&gt;=3.0 (from tasmotizer)   Downloading pyserial-3.5-py2.py3-none-any.whl (90 kB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.6/90.6 kB 254.2 kB/s eta 0:00:00 Requirement already satisfied: PyQt5&gt;=5.10 in /usr/lib/python3/dist-packages (from tasmotizer) (5.15.6) Requirement already satisfied: PyQt5-sip&lt;13,&gt;=12.8 in /usr/lib/python3/dist-packages (from PyQt5&gt;=5.10-&gt;tasmotizer) (12.9.1) Installing collected packages: pyserial, tasmotizer   WARNING: The scripts pyserial-miniterm and pyserial-ports are installed in '/home/ram/.local/bin' which is not on PATH.   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location. Successfully installed pyserial-3.5 tasmotizer-1.2.1  ~ \u2593\u2592\u2591 tasmotizer.py                                                                                   \u2591\u2592\u2593 \u2714  8s  zsh: command not found: tasmotizer.py  ~ \u2593\u2592\u2591 python3 -m tasmotizer.py                                                                        \u2591\u2592\u2593 127 \u0445  Traceback (most recent call last):   File \"/usr/lib/python3.10/runpy.py\", line 187, in _run_module_as_main     mod_name, mod_spec, code = _get_module_details(mod_name, _Error)   File \"/usr/lib/python3.10/runpy.py\", line 110, in _get_module_details     import(pkg_name)   File \"/home/ram/.local/lib/python3.10/site-packages/tasmotizer.py\", line 16, in      from PyQt5.QtSerialPort import QSerialPortInfo, QSerialPort ModuleNotFoundError: No module named 'PyQt5.QtSerialPort'  ~ \u2593\u2592\u2591 sudo apt-get install python3-pyqt5.qtserialport                                               \u2591\u2592\u2593 1 \u0445  5s  [sudo] password for ram:  Reading package lists... Done Building dependency tree... Done Reading state information... Done The following packages were automatically installed and are no longer required:   libcommon-sense-perl libjson-perl libjson-xs-perl libtext-csv-perl libtext-csv-xs-perl   libtypes-serialiser-perl Use 'sudo apt autoremove' to remove them. The following additional packages will be installed:   libqt5serialport5 The following NEW packages will be installed:   libqt5serialport5 python3-pyqt5.qtserialport 0 upgraded, 2 newly installed, 0 to remove and 4 not upgraded. Need to get 64.2 kB of archives. After this operation, 266 kB of additional disk space will be used. Do you want to continue? [Y/n] Y Get:1 http://in.archive.ubuntu.com/ubuntu jammy/universe amd64 libqt5serialport5 amd64 5.15.3-1 [34.6 kB] Get:2 http://in.archive.ubuntu.com/ubuntu jammy/universe amd64 python3-pyqt5.qtserialport amd64 5.15.6+dfsg-1ubuntu3 [29.6 kB] Fetched 64.2 kB in 11s (5,882 B/s)                  Selecting previously unselected package libqt5serialport5:amd64. (Reading database ... 330941 files and directories currently installed.) Preparing to unpack .../libqt5serialport5_5.15.3-1_amd64.deb ... Unpacking libqt5serialport5:amd64 (5.15.3-1) ... Selecting previously unselected package python3-pyqt5.qtserialport. Preparing to unpack .../python3-pyqt5.qtserialport_5.15.6+dfsg-1ubuntu3_amd64.deb ... Unpacking python3-pyqt5.qtserialport (5.15.6+dfsg-1ubuntu3) ... Setting up libqt5serialport5:amd64 (5.15.3-1) ... Setting up python3-pyqt5.qtserialport (5.15.6+dfsg-1ubuntu3) ... Processing triggers for libc-bin (2.35-0ubuntu3.6) ...  ~ \u2593\u2592\u2591 python3 -m tasmotizer.py                                                                    \u2591\u2592\u2593 \u2714  1m 31s  /usr/bin/python3: Error while finding module specification for 'tasmotizer.py' (ModuleNotFoundError: path attribute not found on 'tasmotizer' while trying to find 'tasmotizer.py'). Try using 'tasmotizer' instead of 'tasmotizer.py' as the module name.  ~ \u2593\u2592\u2591 python3 -m tasmotizer                                                                             \u2591\u2592\u2593 1 \u0445  Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.  ~ \u2593\u2592\u2591 python3 -m tasmotizer                                                                       \u2591\u2592\u2593 \u2714  1m 10s  Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway. esptool.py v2.8 Serial port /dev/ttyUSB0  ~ \u2593\u2592\u2591 sudo python3 -m tasmotizer                                                                     \u2591\u2592\u2593 \u2714  60s  [sudo] password for ram:  /usr/bin/python3: No module named tasmotizer  ~ \u2593\u2592\u2591 sudo pip3 install tasmotizer                                                                  \u2591\u2592\u2593 1 \u0445  6s  Collecting tasmotizer   Downloading tasmotizer-1.2.1-py3-none-any.whl (196 kB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 196.8/196.8 kB 1.1 MB/s eta 0:00:00 Collecting pyserial&gt;=3.0   Downloading pyserial-3.5-py2.py3-none-any.whl (90 kB)      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.6/90.6 kB 532.5 kB/s eta 0:00:00 Requirement already satisfied: PyQt5&gt;=5.10 in /usr/lib/python3/dist-packages (from tasmotizer) (5.15.6) Requirement already satisfied: PyQt5-sip&lt;13,&gt;=12.8 in /usr/lib/python3/dist-packages (from PyQt5&gt;=5.10-&gt;tasmotizer) (12.9.1) Installing collected packages: pyserial, tasmotizer Successfully installed pyserial-3.5 tasmotizer-1.2.1 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv <p>[notice] A new release of pip is available: 23.0.1 -&gt; 23.3.2 [notice] To update, run: python3 -m pip install --upgrade pip  ~ \u2593\u2592\u2591 sudo python3 -m tasmotizer                                                                     \u2591\u2592\u2593 \u2714  43s  QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root' esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting.... Chip is ESP8266EX Features: WiFi Crystal is 26MHz Uploading stub... Running stub... Stub running... Read 1048576 bytes at 0x0 in 98.6 seconds (85.1 kbit/s)... Hard resetting via RTS pin... esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting........_..............._..............._ QIODevice::write (QSerialPort): device not open qt.xkb.compose: failed to create compose table  ~ \u2593\u2592\u2591 sudo python3 -m tasmotizer                                                                  \u2591\u2592\u2593 \u2714  16m 4s  [sudo] password for ram:  QStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root' esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting.... Chip is ESP8266EX Features: WiFi Crystal is 26MHz Uploading stub... Running stub... Stub running... Read 1048576 bytes at 0x0 in 98.6 seconds (85.1 kbit/s)... Hard resetting via RTS pin... esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting.................._..............._..... esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting............._..............._.......... QIODevice::write (QSerialPort): device not open esptool.py v2.8 Serial port /dev/ttyUSB0 esptool.py v2.8 Serial port /dev/ttyUSB1 Connecting........_..............._..............._ esptool.py v2.8 Serial port /dev/ttyUSB1 esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting.................._..............._..... esptool.py v2.8 Serial port /dev/ttyUSB1 Connecting............._..............._.......... esptool.py v2.8 Serial port /dev/ttyUSB0 Connecting.... Chip is ESP8266EX Features: WiFi Crystal is 26MHz Uploading stub... Running stub... Stub running... Configuring flash size... Auto-detected Flash size: 1MB Erasing flash (this may take a while)... Chip erase completed successfully in 0.0s Compressed 652928 bytes to 466263... Wrote 652928 bytes (466263 compressed) at 0x00000000 in 49.2 seconds (effective 106.2 kbit/s)... Hash of data verified.</p> <p>Leaving... Hard resetting via RTS pin... QIODevice::write (QSerialPort): device not open</p>"},{"location":"os/ubuntu/installation/install-telegram/","title":"Telegram","text":""},{"location":"os/ubuntu/installation/install-telegram/#installation-steps","title":"Installation Steps","text":""},{"location":"os/ubuntu/installation/install-telegram/#un-official-ubuntu-ppa","title":"Un-Official Ubuntu PPA","text":"<p>Install Telegram application through un-official Ubuntu PPA</p> <ul> <li>Open Terminal</li> <li>Add Telegram un-official PPA</li> </ul> <pre><code>sudo add-apt-repository ppa:atareao/telegram\n</code></pre> <ul> <li>Update APT</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install Telegram</li> </ul> <pre><code>sudo apt install telegram\n</code></pre>"},{"location":"os/ubuntu/installation/install-telegram/#ubuntu-apt","title":"Ubuntu APT","text":"<p>NOTE: This method is not installing the latest version of Telegram anymore.</p> <p>Install Telegram application through Ubuntu APT</p> <ul> <li>Open Terminal</li> <li>Install Telegram Desktop</li> </ul> <pre><code>sudo apt install telegram-desktop\n</code></pre>"},{"location":"os/ubuntu/installation/install-telegram/#ubuntus-software-center","title":"Ubuntu\u2019s Software Center","text":"<ul> <li>Open Ubuntu Software Center</li> <li>Search for <code>Telegram</code></li> <li>In the search results, open <code>Telegram-Desktop</code></li> <li>Click on <code>Install</code> button</li> </ul>"},{"location":"os/ubuntu/installation/install-telegram/#references","title":"References","text":"<ol> <li>Un-Official Telegram PPA</li> <li>Telegram</li> </ol>"},{"location":"os/ubuntu/installation/install-ubuntu-server/","title":"Ubuntu Server","text":"<p>Migrate from Ubuntu Desktop to Ubuntu Server</p>"},{"location":"os/ubuntu/installation/install-ubuntu-server/#steps","title":"Steps","text":"<ul> <li>Open Terminal</li> <li>Install Ubuntu Server <code>sudo apt install ubuntu-server</code></li> <li>Reboot the Server <code>reboot</code></li> <li>Enable Multi User <code>sudo systemctl set-default multi-user.target</code></li> <li>Reboot the Server <code>reboot</code></li> <li>Remove Ubunut Desktop <code>sudo apt purge ubuntu-desktop -y &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo apt autoclean</code></li> <li>Reboot the Server <code>reboot</code></li> </ul>"},{"location":"os/ubuntu/installation/install-vlc/","title":"Install VLC","text":""},{"location":"os/ubuntu/installation/install-vlc/#installation-steps","title":"Installation Steps","text":"<p>Open Terminal and execute the below commands to install VLC through APT</p> <ul> <li>Install VLC</li> </ul> <pre><code>sudo apt install vlc\n</code></pre>"},{"location":"os/ubuntu/installation/install-vscode/","title":"Install VS Code","text":""},{"location":"os/ubuntu/installation/install-vscode/#installation-steps","title":"Installation Steps","text":""},{"location":"os/ubuntu/installation/install-vscode/#through-apt","title":"Through APT","text":"<p>Open Terminal and execute the below commands to install Visual Studio Code through APT</p> <ul> <li>Install Dependencies</li> </ul> <pre><code>sudo apt-get install wget gpg\n</code></pre> <ul> <li>Download Keys</li> </ul> <pre><code>wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\n</code></pre> <ul> <li>Install Keys</li> </ul> <pre><code>sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\n</code></pre> <ul> <li>Add APT Repository</li> </ul> <pre><code>sudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\n</code></pre> <ul> <li>Clean Up Keys</li> </ul> <pre><code>rm -f packages.microsoft.gpg\n</code></pre> <ul> <li>Install Dependencies</li> </ul> <pre><code>sudo apt install apt-transport-https\n</code></pre> <ul> <li>Update Package Cache</li> </ul> <pre><code>sudo apt update\n</code></pre> <ul> <li>Install VS Code</li> </ul> <pre><code>sudo apt install code\n</code></pre>"},{"location":"os/ubuntu/installation/install-vscode/#through-deb-package","title":"Through DEB Package","text":"<ul> <li>Download the DEB package from https://code.visualstudio.com/download</li> <li>Open Terminal and navigate to the downloaded path</li> <li>Run the below command to install from the downloaded DEB file</li> </ul> <pre><code>sudo apt install ./&lt;filename.deb&gt;\n</code></pre>"},{"location":"os/ubuntu/installation/install-whisper/","title":"Install OpenAI Whisper","text":""},{"location":"os/ubuntu/installation/install-whisper/#installation-steps","title":"Installation Steps","text":"<ul> <li>Open Terminal</li> <li>Update APT <code>sudo apt update</code></li> <li>Install FFMPEG <code>sudo apt install ffmpeg</code></li> <li>Install Python 3 <code>sudo apt install python3</code></li> <li>Install PIP <code>sudo apt install python3-pip</code></li> <li>Install Open AI Whisper <code>pip install git+https://github.com/openai/whisper.git</code></li> </ul>"},{"location":"os/ubuntu/installation/install-whisper/#configuration","title":"Configuration","text":"<ul> <li>Open Terminal</li> <li>Whitelist port 10300 <code>ufw allow 10300/tcp</code></li> <li>Add <code>whisper</code> to PATH <code>export PATH=$PATH:/home/&lt;USER&gt;/.local/bin</code></li> </ul>"},{"location":"tools/","title":"Operating System Guides","text":"<ul> <li> <p> GIMP</p> <p>GIMP - Create Passport Photos</p> <p> More</p> </li> </ul>"}]}